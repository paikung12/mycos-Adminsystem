{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://192.168.123.148:5000/api';\n\nclass HttpRequest {\n  constructor() {\n    this.axiosInstance = void 0;\n    this.apiUrl = void 0;\n    this.apiUrl = API_URL;\n    this.axiosInstance = axios.create({\n      // baseURL: process.env.REACT_APP_CLOUD_API,\n      timeout: 120000,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    /**\n     * For authentication in the future\n     */\n\n    const token = localStorage.getItem('token');\n\n    if (token) {\n      this.setAuthorization(token);\n    } else {\n      this.deleteAuthorization();\n    }\n\n    this.axiosInstance.interceptors.request.use(function (config) {\n      // Do something before request is sent\n      return config;\n    }, function (error) {\n      return Promise.reject(error);\n    }); // Add a response interceptor\n\n    this.axiosInstance.interceptors.response.use(function (response) {\n      // Do something with response data\n      return response;\n    }, function (error) {\n      // Do something with response error\n      return Promise.reject(error);\n    });\n  }\n\n  setHeader(header) {\n    this.axiosInstance.defaults.headers.common[header.key] = header.value;\n  }\n\n  setAuthorization(token, type = 'Bearer') {\n    this.axiosInstance.defaults.headers.common['Authorization'] = `${type} ${token}`;\n  }\n\n  deleteAuthorization() {\n    delete this.axiosInstance.defaults.headers.common['Authorization'];\n  }\n\n  get(methodName, data) {\n    return this.axiosInstance.get(`${this.apiUrl}${methodName}`, data);\n  }\n\n  post(methodName, data) {\n    return this.axiosInstance.post(`${this.apiUrl}${methodName}`, data);\n  }\n\n  put(methodName, data) {\n    return this.axiosInstance.put(`${this.apiUrl}${methodName}`, data);\n  }\n\n  delete(methodName, data) {\n    return this.axiosInstance.delete(`${this.apiUrl}${methodName}`, data);\n  }\n\n}\n\nconst httpRequest = new HttpRequest();\nexport default httpRequest;","map":{"version":3,"sources":["/Users/auttapongkompiban/Spec_mycos/mycos-makub/src/store/services/httpRequest.ts"],"names":["axios","API_URL","HttpRequest","constructor","axiosInstance","apiUrl","create","timeout","headers","token","localStorage","getItem","setAuthorization","deleteAuthorization","interceptors","request","use","config","error","Promise","reject","response","setHeader","header","defaults","common","key","value","type","get","methodName","data","post","put","delete","httpRequest"],"mappings":"AAAA,OAAOA,KAAP,MAAqC,OAArC;AAEA,MAAMC,OAAO,GAAG,iCAAhB;;AAEA,MAAMC,WAAN,CAAkB;AAGdC,EAAAA,WAAW,GAAG;AAAA,SAFdC,aAEc;AAAA,SADdC,MACc;AACV,SAAKA,MAAL,GAAcJ,OAAd;AACA,SAAKG,aAAL,GAAqBJ,KAAK,CAACM,MAAN,CAAa;AAC9B;AACAC,MAAAA,OAAO,EAAE,MAFqB;AAG9BC,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX;AAHqB,KAAb,CAArB;AAQA;AACR;AACA;;AACQ,UAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;;AACA,QAAIF,KAAJ,EAAW;AACP,WAAKG,gBAAL,CAAsBH,KAAtB;AACH,KAFD,MAEO;AACH,WAAKI,mBAAL;AACH;;AAED,SAAKT,aAAL,CAAmBU,YAAnB,CAAgCC,OAAhC,CAAwCC,GAAxC,CACI,UAAUC,MAAV,EAAkB;AACd;AACA,aAAOA,MAAP;AACH,KAJL,EAKI,UAAUC,KAAV,EAAiB;AACb,aAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACH,KAPL,EApBU,CA8BV;;AACA,SAAKd,aAAL,CAAmBU,YAAnB,CAAgCO,QAAhC,CAAyCL,GAAzC,CACI,UAAUK,QAAV,EAAoB;AAChB;AACA,aAAOA,QAAP;AACH,KAJL,EAKI,UAAUH,KAAV,EAAiB;AACb;AACA,aAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACH,KARL;AAUH;;AAEDI,EAAAA,SAAS,CAACC,MAAD,EAAyC;AAC9C,SAAKnB,aAAL,CAAmBoB,QAAnB,CAA4BhB,OAA5B,CAAoCiB,MAApC,CAA2CF,MAAM,CAACG,GAAlD,IAAyDH,MAAM,CAACI,KAAhE;AACH;;AAEDf,EAAAA,gBAAgB,CAACH,KAAD,EAAgBmB,IAAY,GAAG,QAA/B,EAAyC;AACrD,SAAKxB,aAAL,CAAmBoB,QAAnB,CAA4BhB,OAA5B,CAAoCiB,MAApC,CACI,eADJ,IAEK,GAAEG,IAAK,IAAGnB,KAAM,EAFrB;AAGH;;AAEDI,EAAAA,mBAAmB,GAAG;AAClB,WAAO,KAAKT,aAAL,CAAmBoB,QAAnB,CAA4BhB,OAA5B,CAAoCiB,MAApC,CAA2C,eAA3C,CAAP;AACH;;AAEDI,EAAAA,GAAG,CAAOC,UAAP,EAA2BC,IAA3B,EAAuC;AACtC,WAAO,KAAK3B,aAAL,CAAmByB,GAAnB,CACF,GAAE,KAAKxB,MAAO,GAAEyB,UAAW,EADzB,EAEHC,IAFG,CAAP;AAIH;;AAEDC,EAAAA,IAAI,CAAOF,UAAP,EAA2BC,IAA3B,EAAuC;AACvC,WAAO,KAAK3B,aAAL,CAAmB4B,IAAnB,CACF,GAAE,KAAK3B,MAAO,GAAEyB,UAAW,EADzB,EAEHC,IAFG,CAAP;AAIH;;AAEDE,EAAAA,GAAG,CAAOH,UAAP,EAA2BC,IAA3B,EAAuC;AACtC,WAAO,KAAK3B,aAAL,CAAmB6B,GAAnB,CACF,GAAE,KAAK5B,MAAO,GAAEyB,UAAW,EADzB,EAEHC,IAFG,CAAP;AAIH;;AAEDG,EAAAA,MAAM,CAAOJ,UAAP,EAA2BC,IAA3B,EAAuC;AACzC,WAAO,KAAK3B,aAAL,CAAmB8B,MAAnB,CACF,GAAE,KAAK7B,MAAO,GAAEyB,UAAW,EADzB,EAEHC,IAFG,CAAP;AAIH;;AAtFa;;AAwFlB,MAAMI,WAAW,GAAG,IAAIjC,WAAJ,EAApB;AACA,eAAeiC,WAAf","sourcesContent":["import axios, { AxiosInstance } from 'axios'\n\nconst API_URL = 'http://192.168.123.148:5000/api'\n\nclass HttpRequest {\n    axiosInstance: AxiosInstance\n    apiUrl: string\n    constructor() {\n        this.apiUrl = API_URL as string\n        this.axiosInstance = axios.create({\n            // baseURL: process.env.REACT_APP_CLOUD_API,\n            timeout: 120000,\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        })\n\n        /**\n         * For authentication in the future\n         */\n        const token = localStorage.getItem('token')\n        if (token) {\n            this.setAuthorization(token)\n        } else {\n            this.deleteAuthorization()\n        }\n\n        this.axiosInstance.interceptors.request.use(\n            function (config) {\n                // Do something before request is sent\n                return config\n            },\n            function (error) {\n                return Promise.reject(error)\n            },\n        )\n\n        // Add a response interceptor\n        this.axiosInstance.interceptors.response.use(\n            function (response) {\n                // Do something with response data\n                return response\n            },\n            function (error) {\n                // Do something with response error\n                return Promise.reject(error)\n            },\n        )\n    }\n\n    setHeader(header: { key: string; value: string }) {\n        this.axiosInstance.defaults.headers.common[header.key] = header.value\n    }\n\n    setAuthorization(token: string, type: string = 'Bearer') {\n        this.axiosInstance.defaults.headers.common[\n            'Authorization'\n        ] = `${type} ${token}`\n    }\n\n    deleteAuthorization() {\n        delete this.axiosInstance.defaults.headers.common['Authorization']\n    }\n\n    get<Type>(methodName: string, data?: any) {\n        return this.axiosInstance.get<Type>(\n            `${this.apiUrl}${methodName}`,\n            data,\n        )\n    }\n\n    post<Type>(methodName: string, data?: any) {\n        return this.axiosInstance.post<Type>(\n            `${this.apiUrl}${methodName}`,\n            data,\n        )\n    }\n\n    put<Type>(methodName: string, data?: any) {\n        return this.axiosInstance.put<Type>(\n            `${this.apiUrl}${methodName}`,\n            data,\n        )\n    }\n\n    delete<Type>(methodName: string, data?: any) {\n        return this.axiosInstance.delete<Type>(\n            `${this.apiUrl}${methodName}`,\n            data,\n        )\n    }\n}\nconst httpRequest = new HttpRequest()\nexport default httpRequest\n"]},"metadata":{},"sourceType":"module"}