{"ast":null,"code":"export function mergeValidators(path, value, clean) {\n  var newValidators = {};\n\n  if (typeof value === \"object\" && value !== null) {\n    newValidators = Object.keys(value).reduce(function (acc, key) {\n      if (clean) {\n        acc[path + \"/\" + key] = undefined;\n      } else if (value[key] !== undefined) {\n        acc[path + \"/\" + key] = value[key];\n      }\n\n      return acc;\n    }, {});\n  } else if (typeof value === \"function\") {\n    var _ref, _ref2;\n\n    newValidators = clean ? (_ref = {}, _ref[path] = undefined, _ref) : (_ref2 = {}, _ref2[path] = value, _ref2);\n  } else if (typeof value === \"boolean\" || value === null) {\n    var _ref3, _ref4; // typeof value === \"boolean\" || value === null only for async validators\n    // value === null if it is an asycn func added on a Collection\n\n\n    var pathValue = value === null ? {\n      type: \"collection\",\n      isValid: value,\n      counter: 0\n    } : {\n      type: \"field\",\n      isValid: value,\n      counter: 0\n    };\n    newValidators = clean ? (_ref3 = {}, _ref3[path] = undefined, _ref3) : (_ref4 = {}, _ref4[path] = pathValue, _ref4);\n  }\n\n  return newValidators;\n}","map":{"version":3,"sources":["/Users/auttapongkompiban/Spec_mycos/mycos-makub/node_modules/usetheform/build/es/utils/utilValidators.js"],"names":["mergeValidators","path","value","clean","newValidators","Object","keys","reduce","acc","key","undefined","_ref","_ref2","_ref3","_ref4","pathValue","type","isValid","counter"],"mappings":"AAAA,OAAO,SAASA,eAAT,CAAyBC,IAAzB,EAA+BC,KAA/B,EAAsCC,KAAtC,EAA6C;AAClD,MAAIC,aAAa,GAAG,EAApB;;AAEA,MAAI,OAAOF,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,KAAK,IAA3C,EAAiD;AAC/CE,IAAAA,aAAa,GAAGC,MAAM,CAACC,IAAP,CAAYJ,KAAZ,EAAmBK,MAAnB,CAA0B,UAAUC,GAAV,EAAeC,GAAf,EAAoB;AAC5D,UAAIN,KAAJ,EAAW;AACTK,QAAAA,GAAG,CAACP,IAAI,GAAG,GAAP,GAAaQ,GAAd,CAAH,GAAwBC,SAAxB;AACD,OAFD,MAEO,IAAIR,KAAK,CAACO,GAAD,CAAL,KAAeC,SAAnB,EAA8B;AACnCF,QAAAA,GAAG,CAACP,IAAI,GAAG,GAAP,GAAaQ,GAAd,CAAH,GAAwBP,KAAK,CAACO,GAAD,CAA7B;AACD;;AAED,aAAOD,GAAP;AACD,KARe,EAQb,EARa,CAAhB;AASD,GAVD,MAUO,IAAI,OAAON,KAAP,KAAiB,UAArB,EAAiC;AACtC,QAAIS,IAAJ,EAAUC,KAAV;;AAEAR,IAAAA,aAAa,GAAGD,KAAK,IAAIQ,IAAI,GAAG,EAAP,EAAWA,IAAI,CAACV,IAAD,CAAJ,GAAaS,SAAxB,EAAmCC,IAAvC,KAAgDC,KAAK,GAAG,EAAR,EAAYA,KAAK,CAACX,IAAD,CAAL,GAAcC,KAA1B,EAAiCU,KAAjF,CAArB;AACD,GAJM,MAIA,IAAI,OAAOV,KAAP,KAAiB,SAAjB,IAA8BA,KAAK,KAAK,IAA5C,EAAkD;AACvD,QAAIW,KAAJ,EAAWC,KAAX,CADuD,CAGvD;AACA;;;AACA,QAAIC,SAAS,GAAGb,KAAK,KAAK,IAAV,GAAiB;AAC/Bc,MAAAA,IAAI,EAAE,YADyB;AAE/BC,MAAAA,OAAO,EAAEf,KAFsB;AAG/BgB,MAAAA,OAAO,EAAE;AAHsB,KAAjB,GAIZ;AACFF,MAAAA,IAAI,EAAE,OADJ;AAEFC,MAAAA,OAAO,EAAEf,KAFP;AAGFgB,MAAAA,OAAO,EAAE;AAHP,KAJJ;AASAd,IAAAA,aAAa,GAAGD,KAAK,IAAIU,KAAK,GAAG,EAAR,EAAYA,KAAK,CAACZ,IAAD,CAAL,GAAcS,SAA1B,EAAqCG,KAAzC,KAAmDC,KAAK,GAAG,EAAR,EAAYA,KAAK,CAACb,IAAD,CAAL,GAAcc,SAA1B,EAAqCD,KAAxF,CAArB;AACD;;AAED,SAAOV,aAAP;AACD","sourcesContent":["export function mergeValidators(path, value, clean) {\n  var newValidators = {};\n\n  if (typeof value === \"object\" && value !== null) {\n    newValidators = Object.keys(value).reduce(function (acc, key) {\n      if (clean) {\n        acc[path + \"/\" + key] = undefined;\n      } else if (value[key] !== undefined) {\n        acc[path + \"/\" + key] = value[key];\n      }\n\n      return acc;\n    }, {});\n  } else if (typeof value === \"function\") {\n    var _ref, _ref2;\n\n    newValidators = clean ? (_ref = {}, _ref[path] = undefined, _ref) : (_ref2 = {}, _ref2[path] = value, _ref2);\n  } else if (typeof value === \"boolean\" || value === null) {\n    var _ref3, _ref4;\n\n    // typeof value === \"boolean\" || value === null only for async validators\n    // value === null if it is an asycn func added on a Collection\n    var pathValue = value === null ? {\n      type: \"collection\",\n      isValid: value,\n      counter: 0\n    } : {\n      type: \"field\",\n      isValid: value,\n      counter: 0\n    };\n    newValidators = clean ? (_ref3 = {}, _ref3[path] = undefined, _ref3) : (_ref4 = {}, _ref4[path] = pathValue, _ref4);\n  }\n\n  return newValidators;\n}"]},"metadata":{},"sourceType":"module"}