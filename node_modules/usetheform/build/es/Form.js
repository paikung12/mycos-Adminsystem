function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { useMemo, memo } from "react";
import { useForm } from "./hooks/useForm";
import { ContextForm as Context } from "./hooks/useOwnContext";

function Form(_ref) {
  var children = _ref.children,
      initialState = _ref.initialState,
      onChange = _ref.onChange,
      onInit = _ref.onInit,
      onReset = _ref.onReset,
      onSubmit = _ref.onSubmit,
      onValidation = _ref.onValidation,
      resetSyncErr = _ref.resetSyncErr,
      validators = _ref.validators,
      asyncValidator = _ref.asyncValidator,
      onAsyncValidation = _ref.onAsyncValidation,
      resetAsyncErr = _ref.resetAsyncErr,
      reducers = _ref.reducers,
      touched = _ref.touched,
      _getInitilaStateForm_ = _ref._getInitilaStateForm_,
      _onMultipleForm_ = _ref._onMultipleForm_,
      name = _ref.name,
      action = _ref.action,
      innerRef = _ref.innerRef,
      rest = _objectWithoutPropertiesLoose(_ref, ["children", "initialState", "onChange", "onInit", "onReset", "onSubmit", "onValidation", "resetSyncErr", "validators", "asyncValidator", "onAsyncValidation", "resetAsyncErr", "reducers", "touched", "_getInitilaStateForm_", "_onMultipleForm_", "name", "action", "innerRef"]);

  var _useForm = useForm({
    initialState: initialState,
    touched: touched,
    onChange: onChange,
    onInit: onInit,
    onReset: onReset,
    onSubmit: onSubmit,
    onValidation: onValidation,
    resetSyncErr: resetSyncErr,
    validators: validators,
    asyncValidator: asyncValidator,
    onAsyncValidation: onAsyncValidation,
    resetAsyncErr: resetAsyncErr,
    reducers: reducers,
    _getInitilaStateForm_: _getInitilaStateForm_,
    _onMultipleForm_: _onMultipleForm_,
    name: name,
    action: action
  }),
      onSubmitForm = _useForm.onSubmitForm,
      props = _objectWithoutPropertiesLoose(_useForm, ["onSubmitForm"]);

  var ctx = useMemo(function () {
    return props;
  }, [props.state, props.isValid, props.status, props.pristine, props.isSubmitting, props.submitAttempts, props.submitted]);
  return /*#__PURE__*/React.createElement(Context.Provider, {
    value: ctx
  }, /*#__PURE__*/React.createElement("form", _extends({
    action: action,
    onSubmit: onSubmitForm
  }, rest, {
    name: name,
    ref: innerRef
  }), children));
}

export default /*#__PURE__*/memo(Form);