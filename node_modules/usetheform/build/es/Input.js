function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from "react";
import { withIndex } from "./hoc/withIndex";
import { useField } from "./hooks/useField";
export var Input = withIndex(function Input(_ref) {
  var onFocus = _ref.onFocus,
      onBlur = _ref.onBlur,
      onChange = _ref.onChange,
      name = _ref.name,
      index = _ref.index,
      checked = _ref.checked,
      validators = _ref.validators,
      asyncValidator = _ref.asyncValidator,
      onValidation = _ref.onValidation,
      onAsyncValidation = _ref.onAsyncValidation,
      resetSyncErr = _ref.resetSyncErr,
      resetAsyncErr = _ref.resetAsyncErr,
      type = _ref.type,
      value = _ref.value,
      touched = _ref.touched,
      multiple = _ref.multiple,
      reducers = _ref.reducers,
      innerRef = _ref.innerRef,
      extraProps = _objectWithoutPropertiesLoose(_ref, ["onFocus", "onBlur", "onChange", "name", "index", "checked", "validators", "asyncValidator", "onValidation", "onAsyncValidation", "resetSyncErr", "resetAsyncErr", "type", "value", "touched", "multiple", "reducers", "innerRef"]);

  var props = useField({
    onFocus: onFocus,
    onBlur: onBlur,
    onChange: onChange,
    type: type,
    name: name,
    index: index,
    checked: checked,
    value: value,
    validators: validators,
    asyncValidator: asyncValidator,
    onValidation: onValidation,
    onAsyncValidation: onAsyncValidation,
    reducers: reducers,
    resetSyncErr: resetSyncErr,
    resetAsyncErr: resetAsyncErr,
    touched: touched,
    multiple: multiple
  });
  return /*#__PURE__*/React.createElement("input", _extends({}, extraProps, props, {
    ref: innerRef
  }));
});