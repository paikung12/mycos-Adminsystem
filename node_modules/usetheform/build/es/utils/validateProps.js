import { isValidValue } from "./isValidValue";
import { isValidIndex } from "./isValidIndex";
var validationPropsFuncs = [asyncValidatorProp, valueProp, nameProp, contextTypeProp, typeProp];
export function validateProps(target, props, contextType) {
  var errors = validationPropsFuncs.map(function (fn) {
    return fn(target, props, contextType);
  }).filter(Boolean);

  if (errors.length > 0) {
    throw new Error(errors[0]);
  }
}

function asyncValidatorProp(target, _ref) {
  var type = _ref.type,
      asyncValidator = _ref.asyncValidator;

  if (typeof asyncValidator !== "undefined" && typeof asyncValidator !== "function") {
    return "The prop \"asyncValidator\" -> \"" + asyncValidator + "\" passed to \"" + target + "\" of type: " + type + " is not allowed. It must be a function";
  }
}

function valueProp(target, _ref2) {
  var type = _ref2.type,
      value = _ref2.value;

  if (typeof value !== "undefined" && (type === "array" && value.constructor !== Array || type === "object" && typeof value !== "object")) {
    return "The prop \"value\": " + value + " of type \"" + type + "\" passed to \"" + target + "\" it is not allowed as initial value.";
  }
}

function nameProp(target, _ref3, contextType) {
  var name = _ref3.name;

  if (!isValidValue(name, contextType)) {
    return "The prop \"name\": " + name + " of type \"" + typeof name + "\" passed to \"" + target + "\" it is not allowed within context a of type \"" + contextType + "\".";
  }
}

function contextTypeProp(target, _ref4, contextType) {
  var type = _ref4.type,
      index = _ref4.index;

  if (contextType === "array" && !isValidIndex(index)) {
    return "The prop \"index\": " + index + " of type \"" + typeof index + "\" passed to a " + target + " \"" + type + "\" must be either a string or number represent as integers.";
  }
}

function typeProp(target, _ref5) {
  var name = _ref5.name,
      value = _ref5.value,
      checked = _ref5.checked,
      type = _ref5.type;

  if (typeof type === "undefined") {
    return "The prop \"type\" -> \"" + type + "\"\" passed to \"" + target + "\" is not allowed. It must be a string.";
  }

  if (type === "file" && value && value !== "") {
    return "The prop \"value\" -> \"" + value + "\" passed to \"" + target + "\": " + name + " of type: " + type + " is not allowed. Input of type \"file\" does not support any default value.";
  }

  if (type === "radio" && (value === undefined || typeof value === "string" && value.replace(/ /g, "") === "")) {
    return target + " of type => " + type + ", must have a valid prop \"value\".";
  }

  if (type !== "checkbox" && type !== "radio" && checked) {
    return "The prop \"checked\" -> \"" + checked + "\" passed to \"" + target + "\": " + name + " of type: " + type + " is not allowed. You can use \"value\" prop instead to set an initial value.";
  }
}