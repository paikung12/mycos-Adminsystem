function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

export function updateState(state, _ref) {
  var nameProp = _ref.nameProp,
      value = _ref.value,
      removeMe = _ref.removeMe,
      _ref$add = _ref.add,
      add = _ref$add === void 0 ? false : _ref$add;
  var isArray = state.constructor === Array; // it uses slice over spread operator to avoid [undefined , anyvalue] and use [empty , anyvalue]

  var newState = isArray ? state.slice() : _extends({}, state);

  if (add && isArray && typeof newState[nameProp] !== "undefined") {
    newState.splice(nameProp, 0, value);
  } else {
    newState[nameProp] = value;
  }

  if (removeMe || value === undefined || value === null || value.constructor === Array && value.every(function (elm) {
    return elm === undefined;
  }) || typeof value === "object" && value.constructor.name !== "File" && Object.keys(value).length === 0 || typeof value === "string" && value === "") {
    delete newState[nameProp];
  }

  return newState;
}