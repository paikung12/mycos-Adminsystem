import React, { useMemo, memo } from "react";
import { useForm } from "./hooks/useForm";
import { ContextForm as Context } from "./hooks/useOwnContext";
export var FormContext = /*#__PURE__*/memo(function FormContext(_ref) {
  var children = _ref.children,
      initialState = _ref.initialState,
      onChange = _ref.onChange,
      onInit = _ref.onInit,
      onReset = _ref.onReset,
      onSubmit = _ref.onSubmit,
      onValidation = _ref.onValidation,
      resetSyncErr = _ref.resetSyncErr,
      validators = _ref.validators,
      asyncValidator = _ref.asyncValidator,
      onAsyncValidation = _ref.onAsyncValidation,
      resetAsyncErr = _ref.resetAsyncErr,
      touched = _ref.touched,
      reducers = _ref.reducers,
      _getInitilaStateForm_ = _ref._getInitilaStateForm_,
      _onMultipleForm_ = _ref._onMultipleForm_,
      name = _ref.name,
      action = _ref.action;
  var props = useForm({
    initialState: initialState,
    onChange: onChange,
    onInit: onInit,
    onReset: onReset,
    onSubmit: onSubmit,
    onValidation: onValidation,
    resetSyncErr: resetSyncErr,
    validators: validators,
    asyncValidator: asyncValidator,
    onAsyncValidation: onAsyncValidation,
    resetAsyncErr: resetAsyncErr,
    touched: touched,
    reducers: reducers,
    _getInitilaStateForm_: _getInitilaStateForm_,
    _onMultipleForm_: _onMultipleForm_,
    name: name,
    action: action
  });
  var ctx = useMemo(function () {
    return props;
  }, [props.state, props.isValid, props.status, props.pristine, props.isSubmitting, props.submitAttempts, props.submitted]);
  return /*#__PURE__*/React.createElement(Context.Provider, {
    value: ctx
  }, children);
});