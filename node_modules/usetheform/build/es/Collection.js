import React, { useMemo } from "react";
import { withIndex } from "./hoc/withIndex";
import { useObject } from "./hooks/useObject";
import { ContextObject as Context } from "./hooks/useOwnContext";
export var Collection = withIndex(function Collection(_ref) {
  var children = _ref.children,
      name = _ref.name,
      index = _ref.index,
      object = _ref.object,
      touched = _ref.touched,
      value = _ref.value,
      reducers = _ref.reducers,
      onValidation = _ref.onValidation,
      resetSyncErr = _ref.resetSyncErr,
      validators = _ref.validators,
      asyncValidator = _ref.asyncValidator,
      onAsyncValidation = _ref.onAsyncValidation,
      resetAsyncErr = _ref.resetAsyncErr;
  var type = object ? "object" : "array";
  var props = useObject({
    name: name,
    index: index,
    touched: touched,
    type: type,
    value: value,
    reducers: reducers,
    onValidation: onValidation,
    validators: validators,
    resetSyncErr: resetSyncErr,
    asyncValidator: asyncValidator,
    onAsyncValidation: onAsyncValidation,
    resetAsyncErr: resetAsyncErr
  });
  var ctx = useMemo(function () {
    return props;
  }, [props.state, props.formStatus]);
  return /*#__PURE__*/React.createElement(Context.Provider, {
    value: ctx
  }, children);
});