import { useCallback } from "react";
import { useObject } from "./useObject";
export function useCollection(_ref) {
  var name = _ref.name,
      index = _ref.index,
      type = _ref.type,
      initialValue = _ref.value,
      reducers = _ref.reducers,
      onValidation = _ref.onValidation,
      resetSyncErr = _ref.resetSyncErr,
      validators = _ref.validators,
      asyncValidator = _ref.asyncValidator,
      onAsyncValidation = _ref.onAsyncValidation,
      resetAsyncErr = _ref.resetAsyncErr;

  var _useObject = useObject({
    name: name,
    index: index,
    type: type,
    value: initialValue,
    reducers: reducers,
    onValidation: onValidation,
    validators: validators,
    resetSyncErr: resetSyncErr,
    asyncValidator: asyncValidator,
    onAsyncValidation: onAsyncValidation,
    resetAsyncErr: resetAsyncErr
  }),
      changeProp = _useObject.changeProp,
      value = _useObject.state,
      state = _useObject.formState;

  var updateCollection = useCallback(function (propName, value) {
    return changeProp(propName, value);
  }, []);
  return {
    updateCollection: updateCollection,
    value: value,
    state: state
  };
}