import { useRef, useCallback } from "react";
export function useMapFields(nameProp, context, type) {
  if (type === void 0) {
    type = "object";
  }

  var mapFields = useRef({});
  var updateRegisteredField = useCallback(function (propName, map) {
    mapFields.current[propName] = map;
  }, []);
  var unRegisterField = useCallback(function (propName) {
    delete mapFields.current[propName];

    if (type === "array") {
      mapFields.current = keepIndexSync(mapFields.current);
    }

    context == null ? void 0 : context.updateRegisteredField == null ? void 0 : context.updateRegisteredField(nameProp.current, mapFields.current);
  }, []);
  return {
    unRegisterField: unRegisterField,
    mapFields: mapFields,
    updateRegisteredField: updateRegisteredField
  };
}

function keepIndexSync(map) {
  var _newMapArray$reduce;

  var keys = Object.keys(map);
  var mySelfKey = keys[keys.length - 1];
  var mySelfVal = map[mySelfKey];
  keys.pop();
  var newMapArray = keys.map(function (key) {
    return map[key];
  });
  return newMapArray.reduce(function (acc, val, index) {
    acc[index] = val;
    return acc;
  }, (_newMapArray$reduce = {}, _newMapArray$reduce[mySelfKey] = mySelfVal, _newMapArray$reduce));
}