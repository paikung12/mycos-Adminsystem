function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import { useState } from "react";
import { getValidationMsg } from "./../utils/getValidationMsg";
var initialState = {
  error: undefined,
  isValid: true
};
export function useValidation(validators) {
  if (validators === void 0) {
    validators = [];
  }

  var _useState = useState(function () {
    return _extends({}, initialState);
  }),
      status = _useState[0],
      setState = _useState[1];

  var onValidation = function onValidation(errors, isValid) {
    return setState({
      error: getValidationMsg(errors),
      isValid: isValid
    });
  };

  var resetSyncErr = function resetSyncErr() {
    return setState(_extends({}, initialState));
  };

  return [status, {
    onValidation: onValidation,
    validators: validators,
    resetSyncErr: resetSyncErr
  }];
}