function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import { useRef } from "react";
export function useMultipleForm(onChange) {
  var stateRef = useRef({}); // private API

  var _useRef = useRef(function (formName, state) {
    stateRef.current[formName] = state;

    if (typeof onChange === "function") {
      onChange(mergeFormStates(stateRef.current));
    }
  }),
      _onMultipleForm_ = _useRef.current; // private API


  var _useRef2 = useRef(function (formName) {
    return stateRef.current[formName];
  }),
      _getInitilaStateForm_ = _useRef2.current;

  var _useRef3 = useRef(function () {
    return mergeFormStates(stateRef.current);
  }),
      getState = _useRef3.current;

  return [getState, {
    _getInitilaStateForm_: _getInitilaStateForm_,
    _onMultipleForm_: _onMultipleForm_
  }];
}

function mergeFormStates(formStates) {
  return Object.keys(formStates).reduce(function (acc, key) {
    return _extends({}, acc, formStates[key]);
  }, {});
}