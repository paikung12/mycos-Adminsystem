import { useRef } from "react";
export function useValidationFunctionAsync(asyncValidator, onAsyncValidation) {
  var validationMsg = useRef(undefined);
  var timestampAsyncFunc = useRef(null);
  var validationFN = useRef(function (value) {
    var newValue = value === undefined ? "" : value;
    var timestamp = Date.now();
    timestampAsyncFunc.current = timestamp;
    onAsyncValidation({
      status: "asyncStart"
    });
    return new Promise(function (resolve, reject) {
      asyncValidator(newValue).then(function (value) {
        if (timestampAsyncFunc.current === timestamp) {
          validationMsg.current = value;
          onAsyncValidation({
            status: "asyncSuccess",
            value: value
          });
          resolve(value);
        } else {
          reject("cancelled");
        }
      }).catch(function (value) {
        if (timestampAsyncFunc.current === timestamp) {
          validationMsg.current = value;
          onAsyncValidation({
            status: "asyncError",
            value: value
          });
          reject(value);
        } else {
          reject("cancelled");
        }
      });
    });
  });
  return [validationFN];
}