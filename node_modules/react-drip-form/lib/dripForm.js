'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _invariant = require('invariant');

var _invariant2 = _interopRequireDefault(_invariant);

var _dripFormValidator = require('drip-form-validator');

var _dotWild = require('dot-wild');

var dot = _interopRequireWildcard(_dotWild);

var _lodash = require('lodash.foreach');

var _lodash2 = _interopRequireDefault(_lodash);

var _lodash3 = require('lodash.isplainobject');

var _lodash4 = _interopRequireDefault(_lodash3);

var _lodash5 = require('lodash.isequal');

var _lodash6 = _interopRequireDefault(_lodash5);

var _isArray = require('./utils/isArray');

var _isArray2 = _interopRequireDefault(_isArray);

var _arrays = require('./utils/arrays');

var arrays = _interopRequireWildcard(_arrays);

var _hasProp = require('./utils/hasProp');

var _hasProp2 = _interopRequireDefault(_hasProp);

var _cancelEvent = require('./utils/cancelEvent');

var _cancelEvent2 = _interopRequireDefault(_cancelEvent);

var _getShallowFilteredValues = require('./utils/getShallowFilteredValues');

var _getShallowFilteredValues2 = _interopRequireDefault(_getShallowFilteredValues);

var _makeDisplayName = require('./utils/makeDisplayName');

var _makeDisplayName2 = _interopRequireDefault(_makeDisplayName);

var _types = require('./types');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var defaultFormOptions = {
  defaultProps: {},
  validations: {},
  normalizers: {},
  messages: {},
  labels: {},
  validateOnChange: true,
  validateOnBlur: true,
  normalizeOnChange: true,
  normalizeOnBlur: true
};

var dripForm = function dripForm() {
  var formOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var options = _extends({}, defaultFormOptions, formOptions);

  return function (WrappedComponent) {
    var _class, _temp, _initialiseProps;

    return _temp = _class = function (_Component) {
      _inherits(DripForm, _Component);

      function DripForm(props, context) {
        _classCallCheck(this, DripForm);

        var _this = _possibleConstructorReturn(this, (DripForm.__proto__ || Object.getPrototypeOf(DripForm)).call(this, props, context));

        _initialiseProps.call(_this);

        _this.values = _extends({}, props.values || {});
        _this.fields = {};

        var validations = options.validations,
            normalizers = options.normalizers,
            messages = options.messages,
            labels = options.labels;


        _this.validator = new _dripFormValidator.Validator(_this.values, validations, { normalizers: normalizers, messages: messages, labels: labels });

        _this.state = {
          values: _this.values,
          errors: {},
          validating: [],
          touches: [],
          dirties: []
        };

        if (typeof props.onInitialize === 'function') {
          props.onInitialize(_this);
        }
        return _this;
      }

      _createClass(DripForm, [{
        key: 'getChildContext',
        value: function getChildContext() {
          var _state = this.state,
              values = _state.values,
              errors = _state.errors,
              validating = _state.validating,
              touches = _state.touches,
              dirties = _state.dirties;


          return {
            dripForm: true,
            group: null,
            register: this.register,
            unregister: this.unregister,
            updateValue: this.updateValue,
            updateTouched: this.updateTouched,
            updateDirty: this.updateDirty,
            updateValidations: this.updateValidations,
            updateNormalizers: this.updateNormalizers,
            updateMessages: this.updateMessages,
            updateLabel: this.updateLabel,
            validating: validating,
            values: values,
            errors: errors,
            touches: touches,
            dirties: dirties
          };
        }
      }, {
        key: 'componentWillMount',
        value: function componentWillMount() {
          this.mounted = true;
        }
      }, {
        key: 'componentDidMount',
        value: function componentDidMount() {
          this.validate();
        }
      }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
          this.mounted = false;
        }
      }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
          var _values = this.props.values;
          var values = nextProps.values;


          if (!(0, _lodash6.default)(values, _values)) {
            this.setState({ values: values });
          }
        }
      }, {
        key: 'setStateIfMounted',
        value: function setStateIfMounted(state, callback) {
          if (this.mounted) {
            this.setState(state, callback);
          }
        }
      }, {
        key: 'getValues',
        value: function getValues() {
          return this.state.values;
        }
      }, {
        key: 'setValues',
        value: function setValues(values) {
          var silent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

          this.values = values;
          this.setStateIfMounted({ values: values });
          this.validator.setValues(values);

          if (silent === false) {
            this.onChangeIfNeeded();
          }
        }
      }, {
        key: 'onChangeIfNeeded',
        value: function onChangeIfNeeded() {
          var onChange = this.props.onChange;


          if (typeof onChange === 'function') {
            onChange(this.values, this);
          }
        }
      }, {
        key: 'clear',
        value: function clear() {
          var onClear = this.props.onClear;


          this.setValues({});
          this.setErrors({});
          this.setStateIfMounted({
            validating: [],
            touches: [],
            dirties: []
          });

          if (typeof onClear === 'function') {
            onClear(this);
          }
        }
      }, {
        key: 'reset',
        value: function reset() {
          var onReset = this.props.onReset;


          this.setValues(this.initialValues());
          this.setErrors({});
          this.setStateIfMounted({
            validating: [],
            touches: [],
            dirties: []
          });

          if (typeof onReset === 'function') {
            onReset(this);
          }
        }
      }, {
        key: 'initialValues',
        value: function initialValues() {
          var _this2 = this;

          var values = {};

          Object.keys(this.fields).forEach(function (key) {
            var field = _this2.fields[key];
            var value = field.initialValue;

            if (value != null) {
              values = dot.set(values, key, value);
            }
          });

          return values;
        }
      }, {
        key: 'getErrors',
        value: function getErrors() {
          return this.state.errors;
        }
      }, {
        key: 'setErrors',
        value: function setErrors(errors) {
          var nextErrors = {};

          (0, _lodash2.default)(errors, function (error, name) {
            if (error) {
              nextErrors[name] = (0, _isArray2.default)(error) ? error : [error];
            }
          });

          this.setStateIfMounted({
            errors: nextErrors
          });
        }
      }, {
        key: 'getField',
        value: function getField(name) {
          return this.fields[name];
        }
      }, {
        key: 'isValid',
        value: function isValid() {
          var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

          return this.validator.isValid(name);
        }
      }, {
        key: 'isValidating',
        value: function isValidating() {
          var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
          var validating = this.state.validating;


          return name ? arrays.includes(validating, name) : validating.length > 0;
        }
      }, {
        key: 'isTouched',
        value: function isTouched() {
          return this.state.touches.length > 0;
        }
      }, {
        key: 'isDirty',
        value: function isDirty() {
          return this.state.dirties.length > 0;
        }
      }, {
        key: 'validate',
        value: function validate() {
          var valid = this.validator.validate();

          this.setStateIfMounted({
            errors: this.validator.getAllErrorMessages()
          });

          return valid;
        }
      }, {
        key: 'asyncValidate',
        value: function asyncValidate(name) {
          var _this3 = this;

          return new Promise(function (resolve, reject) {
            var filteredValidating = function filteredValidating() {
              return _this3.state.validating.filter(function (f) {
                return f !== name;
              });
            };

            var handler = function handler(success) {
              return function () {
                _this3.setStateIfMounted({
                  validating: filteredValidating(),
                  errors: _this3.validator.getAllErrorMessages()
                }, function () {
                  if (success) {
                    resolve();
                  } else {
                    reject(null);
                  }
                });
              };
            };

            _this3.setStateIfMounted({
              validating: [].concat(_toConsumableArray(_this3.state.validating), [name])
            });

            _this3.validator.asyncValidate(name).then(handler(true)).catch(handler(false));
          });
        }
      }, {
        key: 'normalize',
        value: function normalize(name) {
          var v = this.validator;
          v.normalize(name);
          this.setValues(v.getValues(), true);
        }
      }, {
        key: 'submit',
        value: function submit() {
          var _this4 = this;

          var _props = this.props,
              onValidSubmit = _props.onValidSubmit,
              onInvalidSubmit = _props.onInvalidSubmit;

          var onSubmit = function onSubmit(callback) {
            return function () {
              if (typeof callback === 'function') {
                callback(_this4.getValues(), _this4);
              }
            };
          };

          var validSubmit = onSubmit(onValidSubmit);
          var invalidSubmit = onSubmit(onInvalidSubmit);

          var v = this.validator;
          var touches = [];
          var dirties = [];
          var valid = v.validate();
          var asyncKeys = v.getAsyncRuleKeys();

          Object.keys(this.fields).forEach(function (key) {
            touches.push(key);
            dirties.push(key);
          });

          this.setStateIfMounted({
            touches: touches,
            dirties: dirties,
            errors: valid ? {} : v.getAllErrorMessages()
          });

          if (!valid) {
            invalidSubmit();
            return;
          }

          if (asyncKeys.length === 0) {
            validSubmit();
            return;
          }

          this.setStateIfMounted({
            validating: asyncKeys
          });

          v.asyncValidate().then(function () {
            _this4.setStateIfMounted({
              validating: []
            });
            validSubmit();
          }).catch(function () {
            _this4.setStateIfMounted({
              validating: [],
              errors: v.getAllErrorMessages()
            });
            invalidSubmit();
          });
        }
      }, {
        key: 'render',
        value: function render() {
          var _state2 = this.state,
              values = _state2.values,
              errors = _state2.errors;


          var valid = this.isValid();
          var validating = this.isValidating();
          var invalid = !valid;
          var dirty = this.isDirty();
          var pristine = !dirty;
          var touched = this.isTouched();
          var untouched = !touched;

          var props = _extends({}, this.props, {
            values: values,
            errors: errors,
            meta: {
              valid: valid,
              invalid: invalid,
              touched: touched,
              untouched: untouched,
              dirty: dirty,
              pristine: pristine,
              validating: validating
            },
            fields: {
              get: this.fieldGet,
              set: this.fieldSet,
              remove: this.fieldRemove,
              push: this.fieldPush,
              pop: this.fieldPop,
              shift: this.fieldShift,
              unshift: this.fieldUnshift,
              swap: this.fieldSwap,
              move: this.fieldMove,
              map: this.fieldMap,
              forEach: this.fieldForEach,
              isValid: this.fieldValid,
              isValidating: this.fieldValidating
            },
            handlers: {
              onSubmit: this.handleSubmit,
              onClear: this.handleClear,
              onReset: this.handleReset
            }
          });

          return _react2.default.createElement(WrappedComponent, props);
        }
      }]);

      return DripForm;
    }(_react.Component), _class.displayName = (0, _makeDisplayName2.default)(WrappedComponent, 'dripForm'), _class.childContextTypes = _types.DFContextTypes, _class.defaultProps = _extends({
      values: {},
      onInitialize: null,
      onChange: null,
      onClear: null,
      onReset: null,
      onValidSubmit: null,
      onInvalidSubmit: null
    }, options.defaultProps || {}), _initialiseProps = function _initialiseProps() {
      var _this5 = this;

      this.mounted = false;

      this.register = function (name, field) {
        _this5.fields[name] = field;
      };

      this.unregister = function (name) {
        var _state3 = _this5.state,
            values = _state3.values,
            errors = _state3.errors,
            touches = _state3.touches,
            dirties = _state3.dirties;


        delete _this5.fields[name];
        delete errors[name];

        _this5.setValues(dot.remove(values, name));

        _this5.setStateIfMounted({
          errors: errors,
          touches: touches.filter(function (v) {
            return v !== name;
          }),
          dirties: dirties.filter(function (v) {
            return v !== name;
          })
        });
      };

      this.updateValue = function (name, value, validate, silent) {
        var values = (0, _getShallowFilteredValues2.default)(dot.set(_this5.values, name, value));
        _this5.setValues(values, true);

        if (validate) {
          if (options.normalizeOnChange) _this5.normalize(name);
          if (options.validateOnChange) _this5.validate();
        }

        if (silent === false) {
          _this5.onChangeIfNeeded();
        }
      };

      this.updateTouched = function (name, touched, validate) {
        var touches = _this5.state.touches.filter(function (v) {
          return v !== name;
        });

        _this5.setStateIfMounted({
          touches: !touched ? touches : [].concat(_toConsumableArray(touches), [name])
        });

        if (validate) {
          if (options.normalizeOnBlur) _this5.normalize(name);
          if (options.validateOnBlur) {
            _this5.validate();

            if (_this5.isValid(name)) {
              _this5.asyncValidate(name).then(function () {}).catch(function () {});
            }
          }
        }
      };

      this.updateDirty = function (name, dirty) {
        var dirties = _this5.state.dirties.filter(function (v) {
          return v !== name;
        });

        _this5.setStateIfMounted({
          dirties: !dirty ? dirties : [].concat(_toConsumableArray(dirties), [name])
        });
      };

      this.updateValidations = function (name, validations, validate) {
        var v = _this5.validator;

        if ((0, _lodash4.default)(validations)) {
          var previous = v.getRules();

          v.mergeRules(_defineProperty({}, name, _extends({}, (0, _hasProp2.default)(previous, name) ? previous[name] : {}, validations)));

          if (validate) _this5.validate();
        }
      };

      this.updateNormalizers = function (name, normalizers, validate) {
        var v = _this5.validator;

        if ((0, _lodash4.default)(normalizers)) {
          var previous = v.getNormalizers();

          v.mergeNormalizers(_defineProperty({}, name, _extends({}, (0, _hasProp2.default)(previous, name) ? previous[name] : {}, normalizers)));

          if (validate) _this5.validate();
        }
      };

      this.updateMessages = function (name, messages, validate) {
        var v = _this5.validator;

        if ((0, _lodash4.default)(messages)) {
          var previous = v.getMessages();

          v.mergeMessages(_defineProperty({}, name, _extends({}, (0, _hasProp2.default)(previous, name) ? previous[name] : {}, messages)));

          if (validate) _this5.validate();
        }
      };

      this.updateLabel = function (name, label, validate) {
        if (label) {
          _this5.validator.mergeLabels(_defineProperty({}, name, label));

          if (validate) _this5.validate();
        }
      };

      this.fieldGet = function (field, defaultValue) {
        return dot.get(_this5.values, field, defaultValue);
      };

      this.fieldSet = function (field, value) {
        _this5.setValues(dot.set(_this5.values, field, value));
        _this5.validate();
      };

      this.fieldRemove = function (field) {
        _this5.setValues(dot.remove(_this5.values, field));
        _this5.validate();
      };

      this.fieldGetArray = function (field) {
        var value = dot.get(_this5.values, field, []);
        (0, _invariant2.default)((0, _isArray2.default)(value), '"' + field + '" must be array');
        return value;
      };

      this.fieldPush = function (field, value) {
        var current = _this5.fieldGetArray(field);

        _this5.setValues(dot.set(_this5.values, field, arrays.push(current, value)));

        _this5.validate();
      };

      this.fieldPop = function (field) {
        var current = _this5.fieldGetArray(field);

        if (current.length < 1) {
          return undefined;
        }

        var value = arrays.last(current);

        _this5.setValues(dot.set(_this5.values, field, arrays.pop(current)));
        _this5.validate();

        return value;
      };

      this.fieldShift = function (field) {
        var current = _this5.fieldGetArray(field);

        if (current.length < 1) {
          return undefined;
        }

        var value = arrays.first(current);

        _this5.setValues(dot.set(_this5.values, field, arrays.shift(current)));
        _this5.validate();

        return value;
      };

      this.fieldUnshift = function (field) {
        for (var _len = arguments.length, values = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          values[_key - 1] = arguments[_key];
        }

        var current = _this5.fieldGetArray(field);

        _this5.setValues(dot.set(_this5.values, field, arrays.unshift.apply(arrays, [current].concat(_toConsumableArray(values)))));

        _this5.validate();
      };

      this.fieldSwap = function (field, indexA, indexB) {
        var current = _this5.fieldGetArray(field);

        if (current.length < 2) {
          return;
        }

        _this5.setValues(dot.set(_this5.values, field, arrays.swap(current, indexA, indexB)));

        _this5.validate();
      };

      this.fieldMove = function (field, from, to) {
        var current = _this5.fieldGetArray(field);

        if (current.length < 2) {
          return;
        }

        _this5.setValues(dot.set(_this5.values, field, arrays.move(current, from, to)));

        _this5.validate();
      };

      this.fieldMap = function (field, iteratee) {
        return dot.map(_this5.values, field, function (value, key, _, full) {
          return iteratee(full, key, value);
        });
      };

      this.fieldForEach = function (field, iteratee) {
        dot.forEach(_this5.values, field, function (value, key, _, full) {
          iteratee(full, key, value);
        });
      };

      this.fieldValid = function (field) {
        return _this5.isValid(field);
      };

      this.fieldValidating = function (field) {
        return _this5.isValidating(field);
      };

      this.handleSubmit = function (e) {
        (0, _cancelEvent2.default)(e);
        _this5.submit();
      };

      this.handleClear = function (e) {
        (0, _cancelEvent2.default)(e);
        _this5.clear();
      };

      this.handleReset = function (e) {
        (0, _cancelEvent2.default)(e);
        _this5.reset();
      };
    }, _temp;
  };
};

exports.default = dripForm;