'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.move = exports.swap = exports.remove = exports.unshift = exports.shift = exports.pop = exports.push = exports.includes = exports.last = exports.first = undefined;

var _immutableArrays = require('immutable-arrays');

var _hasProp = require('./hasProp');

var _hasProp2 = _interopRequireDefault(_hasProp);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var first = exports.first = function first(array) {
  return array.length > 0 ? array[0] : undefined;
};

var last = exports.last = function last(array) {
  return array.length > 0 ? array[array.length - 1] : undefined;
};

var includes = exports.includes = function includes(array, value) {
  return array.indexOf(value) > -1;
};

var push = exports.push = function push(array) {
  for (var _len = arguments.length, values = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    values[_key - 1] = arguments[_key];
  }

  return _immutableArrays.push.apply(undefined, [array].concat(_toConsumableArray(values)));
};

var pop = exports.pop = function pop(array) {
  return (0, _immutableArrays.pop)(array);
};

var shift = exports.shift = function shift(array) {
  return (0, _immutableArrays.shift)(array);
};

var unshift = exports.unshift = function unshift(array) {
  for (var _len2 = arguments.length, values = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    values[_key2 - 1] = arguments[_key2];
  }

  return _immutableArrays.unshift.apply(undefined, [array].concat(_toConsumableArray(values)));
};

var remove = exports.remove = function remove(array, index) {
  return (0, _immutableArrays.del)(array, index);
};

// eslint-disable-next-line arrow-parens
var swap = exports.swap = function swap(array, indexA, indexB) {
  if (!(0, _hasProp2.default)(array, indexA) || !(0, _hasProp2.default)(array, indexB)) {
    return array;
  }

  var arr = [].concat(_toConsumableArray(array));
  var b = arr[indexA];
  arr[indexA] = arr[indexB];
  arr[indexB] = b;

  return arr;
};

// eslint-disable-next-line arrow-parens
var move = exports.move = function move(array, from, to) {
  if (!(0, _hasProp2.default)(array, from) || from === to) {
    return array;
  }

  var arr = [].concat(_toConsumableArray(array));
  var value = arr[from];
  var next = arr.slice(0, from).concat(arr.slice(from + 1));

  return [].concat(_toConsumableArray(next.slice(0, to)), [value], _toConsumableArray(next.slice(to)));
};