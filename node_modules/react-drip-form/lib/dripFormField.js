'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _invariant = require('invariant');

var _invariant2 = _interopRequireDefault(_invariant);

var _lodash = require('lodash.isequal');

var _lodash2 = _interopRequireDefault(_lodash);

var _dotWild = require('dot-wild');

var dot = _interopRequireWildcard(_dotWild);

var _arrays = require('./utils/arrays');

var arrays = _interopRequireWildcard(_arrays);

var _hasProp = require('./utils/hasProp');

var _hasProp2 = _interopRequireDefault(_hasProp);

var _makeDisplayName = require('./utils/makeDisplayName');

var _makeDisplayName2 = _interopRequireDefault(_makeDisplayName);

var _getFieldType = require('./utils/getFieldType');

var _getFieldType2 = _interopRequireDefault(_getFieldType);

var _getFieldValue = require('./utils/getFieldValue');

var _getFieldValue2 = _interopRequireDefault(_getFieldValue);

var _formatFieldValue = require('./utils/formatFieldValue');

var _formatFieldValue2 = _interopRequireDefault(_formatFieldValue);

var _parseFieldValue = require('./utils/parseFieldValue');

var _parseFieldValue2 = _interopRequireDefault(_parseFieldValue);

var _createFieldProps = require('./utils/createFieldProps');

var _createFieldProps2 = _interopRequireDefault(_createFieldProps);

var _types = require('./types');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var normalizeFieldName = function normalizeFieldName(name) {
  return name.replace(/\[\]$/, '');
};

var getPropsValue = function getPropsValue(props, defaultValue) {
  return (0, _hasProp2.default)(props, 'value') ? props.value : defaultValue;
};

var dripFormField = function dripFormField() {
  var fieldType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'text';
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return function (WrappedComponent) {
    var _class, _temp;

    return _temp = _class = function (_Component) {
      _inherits(DripFormField, _Component);

      function DripFormField(props, context) {
        _classCallCheck(this, DripFormField);

        var _this = _possibleConstructorReturn(this, (DripFormField.__proto__ || Object.getPrototypeOf(DripFormField)).call(this, props, context));

        _this.handleChange = function (e) {
          var _this$context = _this.context,
              updateValue = _this$context.updateValue,
              updateDirty = _this$context.updateDirty,
              updateTouched = _this$context.updateTouched;
          var parser = _this.props.parser;

          var value = (0, _parseFieldValue2.default)(_this.getChangedValue(e), _this.name, parser);

          var dirty = !(0, _lodash2.default)(_this.initialValue, value);

          if (fieldType === 'checkbox' || fieldType === 'radio') {
            updateTouched(_this.name, true, false);
          }

          updateDirty(_this.name, dirty);
          updateValue(_this.name, value, true, false);

          if (typeof _this.props.onChange === 'function') {
            _this.props.onChange(e);
          }
        };

        _this.handleBlur = function (e) {
          if (fieldType !== 'checkbox' && fieldType !== 'radio') {
            _this.context.updateTouched(_this.name, true, true);
          }

          if (typeof _this.props.onBlur === 'function') {
            _this.props.onBlur(e);
          }
        };

        _this.handleFocus = function (e) {
          if (typeof _this.props.onFocus === 'function') {
            _this.props.onFocus(e);
          }
        };

        (0, _invariant2.default)((0, _hasProp2.default)(context, 'dripForm'), 'Field component must be inside a Drip Form component (`dripForm()` HOC).');

        var name = normalizeFieldName((context.group ? context.group.name : props.name) || '');

        (0, _invariant2.default)(!!name, 'Field component must be specified name property.');

        _this.name = name;
        context.register(_this.name, _this);

        _this.updateMetaData(props, context, false);
        return _this;
      }

      // @FIXME: Refactoring


      _createClass(DripFormField, [{
        key: 'componentWillMount',
        value: function componentWillMount() {
          var contextValue = dot.get(this.context.values, this.name);
          var value = void 0;

          switch (fieldType) {
            case 'radio':
            case 'checkbox':
              value = contextValue;
              break;
            default:
              value = getPropsValue(this.props, contextValue);
              break;
          }

          if (!this.context.group) {
            this.context.updateValue(this.name, value, false, true);
          }

          this.updateMetaData(this.props, this.context, false);
        }
      }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
          var _context = this.context,
              register = _context.register,
              unregister = _context.unregister,
              updateValue = _context.updateValue,
              updateLabel = _context.updateLabel,
              updateValidations = _context.updateValidations,
              updateNormalizers = _context.updateNormalizers,
              updateMessages = _context.updateMessages;
          var _props = this.props,
              _name = _props.name,
              _value = _props.value,
              _label = _props.label,
              _validations = _props.validations,
              _normalizers = _props.normalizers,
              _messages = _props.messages;
          var name = nextProps.name,
              value = nextProps.value,
              label = nextProps.label,
              validations = nextProps.validations,
              normalizers = nextProps.normalizers,
              messages = nextProps.messages;


          if (name !== _name) {
            this.name = name;
            unregister(_name);
            register(name, this);
          }

          if (!(0, _lodash2.default)(value, _value)) {
            this.initialValue = value;
            updateValue(name, value, true, true);
          }

          if (!this.context.group) {
            if (label !== _label) {
              updateLabel(name, label, true);
            }

            if (!(0, _lodash2.default)(validations, _validations)) {
              updateValidations(name, validations, true);
            }

            if (!(0, _lodash2.default)(normalizers, _normalizers)) {
              updateNormalizers(name, normalizers, true);
            }

            if (!(0, _lodash2.default)(messages, _messages)) {
              updateMessages(name, messages, true);
            }
          }
        }
      }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
          this.context.unregister(this.name);
        }
      }, {
        key: 'updateMetaData',
        value: function updateMetaData(props, context, validate) {
          var updateValidations = context.updateValidations,
              updateNormalizers = context.updateNormalizers,
              updateMessages = context.updateMessages,
              updateLabel = context.updateLabel;
          var validations = props.validations,
              normalizers = props.normalizers,
              label = props.label,
              messages = props.messages;

          // @FIXME: Refactoring

          var contextValue = dot.get(context.values, this.name);

          switch (fieldType) {
            case 'radio':
            case 'checkbox':
              this.initialValue = contextValue;
              break;
            default:
              this.initialValue = getPropsValue(props, contextValue);
              break;
          }

          if (context.group) {
            return;
          }

          updateValidations(this.name, validations, validate);
          updateNormalizers(this.name, normalizers, validate);
          updateLabel(this.name, label, validate);
          updateMessages(this.name, messages, validate);
        }
      }, {
        key: 'getValue',
        value: function getValue() {
          return dot.get(this.context.values, this.name);
        }
      }, {
        key: 'getType',
        value: function getType() {
          return (0, _getFieldType2.default)(fieldType, this.props);
        }
      }, {
        key: 'getErrors',
        value: function getErrors() {
          var _context2 = this.context,
              group = _context2.group,
              errors = _context2.errors;


          return group ? undefined : errors[this.name];
        }
      }, {
        key: 'getError',
        value: function getError() {
          return arrays.first(this.getErrors() || []);
        }
      }, {
        key: 'isInvalid',
        value: function isInvalid() {
          return !!this.getError();
        }
      }, {
        key: 'isValid',
        value: function isValid() {
          return !this.isInvalid();
        }
      }, {
        key: 'isValidating',
        value: function isValidating() {
          var _context3 = this.context,
              group = _context3.group,
              validating = _context3.validating;


          return group ? false : arrays.includes(validating, this.name);
        }
      }, {
        key: 'isTouched',
        value: function isTouched() {
          var _context4 = this.context,
              group = _context4.group,
              touches = _context4.touches;


          return group ? false : arrays.includes(touches, this.name);
        }
      }, {
        key: 'isUntouched',
        value: function isUntouched() {
          return !this.isTouched();
        }
      }, {
        key: 'isDirty',
        value: function isDirty() {
          var _context5 = this.context,
              group = _context5.group,
              dirties = _context5.dirties;


          return group ? false : arrays.includes(dirties, this.name);
        }
      }, {
        key: 'isPristine',
        value: function isPristine() {
          return !this.isDirty();
        }

        // @FIXME Refactoring

      }, {
        key: 'getChangedValue',
        value: function getChangedValue(e) {
          var group = this.context.group;

          var contextValue = this.getValue();
          var value = (0, _getFieldValue2.default)(this.getType(), e);

          if (group && group.multiple) {
            var ctx = contextValue || [];

            if (value === '') {
              value = arrays.remove(ctx, ctx.indexOf(this.props.value));
            } else {
              value = arrays.push(ctx, value);
            }

            value = value.length > 0 ? value : null;
          }

          return value;
        }
      }, {
        key: 'render',
        value: function render() {
          var _props2 = this.props,
              parser = _props2.parser,
              validations = _props2.validations,
              normalizers = _props2.normalizers,
              messages = _props2.messages,
              onChange = _props2.onChange,
              onFocus = _props2.onFocus,
              onBlur = _props2.onBlur,
              name = _props2.name,
              value = _props2.value,
              label = _props2.label,
              formatter = _props2.formatter,
              props = _objectWithoutProperties(_props2, ['parser', 'validations', 'normalizers', 'messages', 'onChange', 'onFocus', 'onBlur', 'name', 'value', 'label', 'formatter']);

          var contextValue = (0, _formatFieldValue2.default)(this.getValue(), this.name, formatter);

          return _react2.default.createElement(WrappedComponent, (0, _createFieldProps2.default)(this.getType(), contextValue, _extends({}, props, {
            input: {
              name: name,
              value: value,
              onChange: this.handleChange,
              onFocus: this.handleFocus,
              onBlur: this.handleBlur
            },
            meta: {
              label: label,
              error: this.getError(),
              errors: this.getErrors(),
              valid: this.isValid(),
              invalid: this.isInvalid(),
              touched: this.isTouched(),
              untouched: this.isUntouched(),
              dirty: this.isDirty(),
              pristine: this.isPristine(),
              validating: this.isValidating()
            }
          })));
        }
      }]);

      return DripFormField;
    }(_react.Component), _class.displayName = (0, _makeDisplayName2.default)(WrappedComponent, 'dripFormField'), _class.contextTypes = _types.DFContextTypes, _class.defaultProps = _extends({
      label: null,
      parser: null,
      formatter: _formatFieldValue.defaultFormatter,
      validations: null,
      normalizers: null,
      messages: null,
      onChange: null,
      onBlur: null,
      onFocus: null
    }, options.defaultProps || {}), _temp;
  };
};

exports.default = dripFormField;