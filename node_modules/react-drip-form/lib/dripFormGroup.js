'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _invariant = require('invariant');

var _invariant2 = _interopRequireDefault(_invariant);

var _lodash = require('lodash.isequal');

var _lodash2 = _interopRequireDefault(_lodash);

var _dotWild = require('dot-wild');

var dot = _interopRequireWildcard(_dotWild);

var _arrays = require('./utils/arrays');

var arrays = _interopRequireWildcard(_arrays);

var _hasProp = require('./utils/hasProp');

var _hasProp2 = _interopRequireDefault(_hasProp);

var _makeDisplayName = require('./utils/makeDisplayName');

var _makeDisplayName2 = _interopRequireDefault(_makeDisplayName);

var _types = require('./types');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var dripFormGroup = function dripFormGroup() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return function (WrappedComponent) {
    var _class, _temp;

    return _temp = _class = function (_Component) {
      _inherits(DripFormGroup, _Component);

      function DripFormGroup(props, context) {
        _classCallCheck(this, DripFormGroup);

        var _this = _possibleConstructorReturn(this, (DripFormGroup.__proto__ || Object.getPrototypeOf(DripFormGroup)).call(this, props, context));

        (0, _invariant2.default)((0, _hasProp2.default)(context, 'dripForm'), 'FieldGroup component must be inside a Drip Form component (`dripForm()` HOC).');

        (0, _invariant2.default)(!!props.name, 'FieldGroup component must be specified name property.');

        _this.updateMetaData(props, context, false);
        return _this;
      }

      _createClass(DripFormGroup, [{
        key: 'getChildContext',
        value: function getChildContext() {
          var _props = this.props,
              name = _props.name,
              multiple = _props.multiple;


          return _extends({}, this.context, {
            group: {
              name: name,
              multiple: multiple
            }
          });
        }
      }, {
        key: 'componentWillMount',
        value: function componentWillMount() {
          var name = this.props.name;

          var value = this.props.value !== null ? this.props.value : dot.get(this.context.values, name);

          this.context.updateValue(name, value, false, true);
          this.updateMetaData(this.props, this.context, false);
        }
      }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
          var _context = this.context,
              updateValue = _context.updateValue,
              updateLabel = _context.updateLabel,
              updateValidations = _context.updateValidations,
              updateNormalizers = _context.updateNormalizers,
              updateMessages = _context.updateMessages;
          var _props2 = this.props,
              _value = _props2.value,
              _label = _props2.label,
              _validations = _props2.validations,
              _normalizers = _props2.normalizers,
              _messages = _props2.messages;
          var name = nextProps.name,
              value = nextProps.value,
              label = nextProps.label,
              validations = nextProps.validations,
              normalizers = nextProps.normalizers,
              messages = nextProps.messages;


          if (!(0, _lodash2.default)(value, _value)) {
            this.initialValue = value;
            updateValue(name, value, true, true);
          }

          if (label !== _label) {
            updateLabel(name, label, true);
          }

          if (!(0, _lodash2.default)(validations, _validations)) {
            updateValidations(name, validations, true);
          }

          if (!(0, _lodash2.default)(normalizers, _normalizers)) {
            updateNormalizers(name, normalizers, true);
          }

          if (!(0, _lodash2.default)(messages, _messages)) {
            updateMessages(name, messages, true);
          }
        }
      }, {
        key: 'updateMetaData',
        value: function updateMetaData(props, context, validate) {
          var updateValidations = context.updateValidations,
              updateNormalizers = context.updateNormalizers,
              updateMessages = context.updateMessages,
              updateLabel = context.updateLabel;
          var name = props.name,
              validations = props.validations,
              normalizers = props.normalizers,
              label = props.label,
              messages = props.messages;


          this.initialValue = dot.get(context.values, name);

          updateValidations(name, validations, validate);
          updateNormalizers(name, normalizers, validate);
          updateLabel(name, label, validate);
          updateMessages(name, messages, validate);
        }
      }, {
        key: 'getValue',
        value: function getValue() {
          return dot.get(this.context.values, this.props.name);
        }
      }, {
        key: 'getErrors',
        value: function getErrors() {
          var errors = this.context.errors;
          var name = this.props.name;


          return (0, _hasProp2.default)(errors, name) ? errors[name] : undefined;
        }
      }, {
        key: 'getError',
        value: function getError() {
          var errors = this.getErrors();
          return errors ? errors[0] : undefined;
        }
      }, {
        key: 'isInvalid',
        value: function isInvalid() {
          return !!this.getError();
        }
      }, {
        key: 'isValid',
        value: function isValid() {
          return !this.isInvalid();
        }
      }, {
        key: 'isValidating',
        value: function isValidating() {
          return arrays.includes(this.context.validating, this.props.name);
        }
      }, {
        key: 'isTouched',
        value: function isTouched() {
          return arrays.includes(this.context.touches, this.props.name);
        }
      }, {
        key: 'isUntouched',
        value: function isUntouched() {
          return !this.isTouched();
        }
      }, {
        key: 'isDirty',
        value: function isDirty() {
          return arrays.includes(this.context.dirties, this.props.name);
        }
      }, {
        key: 'isPristine',
        value: function isPristine() {
          return !this.isDirty();
        }
      }, {
        key: 'render',
        value: function render() {
          var _props3 = this.props,
              multiple = _props3.multiple,
              validations = _props3.validations,
              normalizers = _props3.normalizers,
              messages = _props3.messages,
              name = _props3.name,
              label = _props3.label,
              props = _objectWithoutProperties(_props3, ['multiple', 'validations', 'normalizers', 'messages', 'name', 'label']);

          return _react2.default.createElement(WrappedComponent, _extends({}, props, {
            meta: {
              name: name,
              label: label,
              value: this.getValue(),
              error: this.getError(),
              errors: this.getErrors(),
              valid: this.isValid(),
              invalid: this.isInvalid(),
              touched: this.isTouched(),
              untouched: this.isUntouched(),
              dirty: this.isDirty(),
              pristine: this.isPristine(),
              validating: this.isValidating()
            }
          }));
        }
      }]);

      return DripFormGroup;
    }(_react.Component), _class.displayName = (0, _makeDisplayName2.default)(WrappedComponent, 'dripFormGroup'), _class.contextTypes = _types.DFContextTypes, _class.childContextTypes = _types.DFContextTypes, _class.defaultProps = _extends({
      multiple: false,
      value: null,
      label: null,
      validations: null,
      normalizers: null,
      messages: null
    }, options.defaultProps || {}), _temp;
  };
};

exports.default = dripFormGroup;